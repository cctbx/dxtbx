from __future__ import annotations

from typing import Any, Callable, Protocol, Type, Union, overload

from scitbx.array_family import flex

from dxtbx.format.Format import Format
from dxtbx.format.image import ImageBool, ImageDouble
from dxtbx.masking import GoniometerShadowMasker
from dxtbx.model import Beam, Detector, Goniometer, Scan

class Reader(Protocol):
    def read(self, index: int | None) -> Any: ...
    def is_single_file_reader(self) -> bool: ...
    def paths(self) -> list[str]: ...
    def master_path(self) -> str: ...
    def identifiers(self) -> list[str]: ...
    def __len__(self) -> int: ...

ImageData = Union[flex.int, flex.double, flex.float]

class ExternalLookup:
    @property
    def dx(self) -> ExternalLookupItemDouble: ...
    @property
    def dy(self) -> ExternalLookupItemDouble: ...
    @property
    def gain(self) -> ExternalLookupItemDouble: ...
    @property
    def mask(self) -> ExternalLookupItemBool: ...
    @property
    def pedestal(self) -> ExternalLookupItemDouble: ...

class ExternalLookupItemBool:
    data: ImageBool
    filename: str
    def set_data_generator(self, generator: Callable[[], ImageBool | None]) -> None: ...

class ExternalLookupItemDouble:
    data: ImageDouble
    filename: str
    def set_data_generator(
        self, generator: Callable[[], ImageDouble | None]
    ) -> None: ...

class ImageGrid(ImageSet):
    def __init__(self, *args, **kwargs) -> None: ...
    def from_imageset(self, *args, **kwargs) -> Any: ...
    def get_grid_size(self) -> Any: ...
    def __getinitargs__(self) -> Any: ...
    def __reduce__(self) -> Any: ...

class ImageSequence(ImageSet):
    @overload
    def __init__(
        self,
        data: ImageSetData,
        beam: Beam,
        detector: Detector,
        goniometer: Goniometer,
        scan: Scan,
    ) -> None: ...
    @overload
    def __init__(
        self,
        data: ImageSetData,
        beam: Beam,
        detector: Detector,
        goniometer: Goniometer,
        scan: Scan,
        indices: flex.size_t,
    ) -> None: ...
    def complete_set(self) -> Any: ...
    def get_array_range(self) -> Any: ...
    def get_beam(self) -> Any: ...
    def get_detector(self) -> Any: ...
    def get_goniometer(self) -> Any: ...
    def get_scan(self) -> Any: ...
    def partial_set(self, *args, **kwargs) -> Any: ...
    def set_beam(self, boost) -> Any: ...
    def set_detector(self, boost) -> Any: ...
    def set_goniometer(self, boost) -> Any: ...
    def set_scan(self, boost) -> Any: ...
    def update_detector_px_mm_data(self) -> Any: ...
    def __getinitargs__(self) -> Any: ...
    def __reduce__(self) -> Any: ...

class ImageSet:
    def __init__(boost, dxtbx) -> None: ...
    def as_imageset(self) -> Any: ...
    def clear_cache(self) -> Any: ...
    def complete_set(self) -> Any: ...
    def data(self) -> Any: ...
    def get_beam(self) -> Any: ...
    def get_corrected_data(self, int) -> Any: ...
    def get_detector(self) -> Any: ...
    def get_gain(self, int) -> Any: ...
    def get_goniometer(self) -> Any: ...
    def get_image_identifier(self, int) -> Any: ...
    def get_mask(self, int) -> Any: ...
    def get_path(self, int) -> Any: ...
    def get_pedestal(self, int) -> Any: ...
    def get_raw_data(self, index: int) -> tuple[ImageData]: ...
    def get_scan(self) -> Any: ...
    def has_dynamic_mask(self) -> Any: ...
    def indices(self) -> Any: ...
    def is_marked_for_rejection(self, int) -> Any: ...
    def mark_for_rejection(self, int, bool) -> Any: ...
    def partial_set(self, *args, **kwargs) -> Any: ...
    def set_beam(self, boost) -> Any: ...
    def set_detector(self, boost) -> Any: ...
    def set_goniometer(self, boost) -> Any: ...
    def set_scan(self, boost) -> Any: ...
    def size(self) -> Any: ...
    def update_detector_px_mm_data(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __getinitargs__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    @property
    def external_lookup(self) -> ExternalLookup: ...

class ImageSetData:
    def __init__(
        self,
        reader: Reader,
        masker: GoniometerShadowMasker | Callable[[], GoniometerShadowMasker] | None,
        template: str = "",
        vendor: str = "",
        params: dict | None = None,
        format: Format | None = None,
    ) -> None: ...
    def get_beam(self, index: int) -> int: ...
    def get_data(self, index: int) -> int: ...
    def get_detector(self, index: int) -> int: ...
    def get_goniometer(self, index: int) -> int: ...
    def get_scan(self, index: int) -> int: ...
    def get_format_class(self) -> Type[Format]: ...
    def get_image_identifier(self, index: int) -> str: ...
    def get_params(self) -> dict | None: ...
    def get_path(self, int) -> str: ...
    def get_master_path(self) -> str: ...
    def get_template(self) -> str: ...
    def get_vendor(self) -> str: ...
    def has_single_file_reader(self) -> bool: ...
    def is_marked_for_rejection(self, index: int) -> bool: ...
    def mark_for_rejection(self, index: bool, is_rejected: bool) -> None: ...
    def masker(self) -> GoniometerShadowMasker | None: ...
    def reader(self) -> Reader: ...
    def set_beam(self, value: int, index: int) -> None: ...
    def set_detector(self, value: int, index: int) -> None: ...
    def set_goniometer(self, value: int, index: int) -> None: ...
    def set_scan(self, value: int, index: int) -> None: ...
    def set_params(self, value: dict | None) -> None: ...
    def set_format_class(self, format: Type[Format]) -> None: ...
    def set_template(self, template: str) -> None: ...
    def set_vendor(self, vendor: str) -> None: ...
    @property
    def external_lookup(self) -> ExternalLookup: ...
