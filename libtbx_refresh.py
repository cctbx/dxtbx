from __future__ import annotations

import contextlib
import importlib
import importlib.metadata
import inspect
import io
import os
import subprocess
import sys
from pathlib import Path

import libtbx
import libtbx.pkg_utils

try:
    import dials.precommitbx.nagger

    dials.precommitbx.nagger.nag()
except ModuleNotFoundError:
    pass


def _find_package_metadata_dir(package_name: str):
    """Find the metadata directory for a package, whether .egg-info or .dist-info."""
    try:
        # Use importlib.metadata to find the package distribution
        dist = importlib.metadata.distribution(package_name)
        # Get the metadata location
        return Path(dist._path)
    except importlib.metadata.PackageNotFoundError:
        # Fall back to searching common locations
        for site_dir in sys.path:
            site_path = Path(site_dir)
            # Look for both .dist-info and .egg-info
            for pattern in [f"{package_name}*.dist-info", f"{package_name}*.egg-info"]:
                for metadata_dir in site_path.glob(pattern):
                    if metadata_dir.exists():
                        return metadata_dir
    return None


def _install_setup_readonly_fallback(package_name: str):
    """
    Partially install package in the libtbx build folder.

    This is a less complete installation - base python console_scripts
    entrypoints will not be installed, but the basic package metadata
    and other entrypoints will be enumerable through dispatcher black magic
    """
    root_path = libtbx.env.dist_path(package_name)
    import_path = os.path.join(root_path, "src")

    # Install this into a build/dxtbx subfolder
    build_path = abs(libtbx.env.build_path / package_name)
    subprocess.run(
        [
            sys.executable,
            "-m",
            "pip",
            "install",
            "--prefix",
            build_path,
            "--no-build-isolation",
            "--no-deps",
            "-e",
            root_path,
        ],
        check=True,
    )

    # Get the actual environment being configured (NOT libtbx.env)
    env = _get_real_env_hack_hack_hack()

    # Update the libtbx environment pythonpaths to point to the source
    # location; in PEP 660 we don't need the .egg-info to be in the source
    # but we still need the source in the path
    rel_path = libtbx.env.as_relocatable_path(import_path)
    if rel_path not in env.pythonpath:
        env.pythonpath.insert(0, rel_path)

    # Make sure the metadata directory is also in the path if it's not in site-packages
    metadata_dir = _find_package_metadata_dir(package_name)
    if metadata_dir and metadata_dir.parent not in sys.path:
        metadata_parent = libtbx.env.as_relocatable_path(str(metadata_dir.parent))
        if metadata_parent not in env.pythonpath:
            env.pythonpath.append(metadata_parent)

    # Update the sys.path so we can find the package in this process
    if import_path not in sys.path:
        sys.path.insert(0, import_path)

    # ...and make sure it is picked up by the import system
    importlib.invalidate_caches()

    # This is already generated by this point, but will get picked up
    # on the second libtbx.refresh.
    module = env.module_dict[package_name]
    if f"src/{package_name}" not in module.extra_command_line_locations:
        module.extra_command_line_locations.append(f"src/{package_name}")

    # Because dispatchers for all modules are generated _before_ any of
    # libtbx_refresh are run, then we need to regenerate all of the
    # dispatchers now we've added the extra PYTHONPATH
    with contextlib.redirect_stdout(io.StringIO()):
        for module in env.module_list:
            module.process_command_line_directories()


def _get_real_env_hack_hack_hack():
    """
    Get the real, currently-being-configured libtbx.env environment.

    This is not libtbx.env, because although libtbx.env_config.environment.cold_start
    does:
        self.pickle()
        libtbx.env = self
    the first time there is an "import libtbx.load_env" this environment
    gets replaced by unpickling the freshly-written libtbx_env file onto
    libtbx.env, thereby making the environment accessed via libtbx.env
    *not* the actual one that is currently being constructed.

    So, the only way to get this environment being configured in order
    to - like - configure it, is to walk the stack trace and extract the
    self object from environment.refresh directly.
    """
    for frame in inspect.stack():
        if (
            frame.filename.endswith("env_config.py")
            and frame.function == "refresh"
            and "self" in frame.frame.f_locals
        ):
            return frame.frame.f_locals["self"]

    raise RuntimeError("Could not determine real libtbx.env_config.environment object")


# When building in libtbx, always assume it's unsafe to write to base/
_install_setup_readonly_fallback("dxtbx")
